[
  {
    "objectID": "contents/computing-environment.html",
    "href": "contents/computing-environment.html",
    "title": "Computing Environments",
    "section": "",
    "text": "Noam Ross says that good reproducibility is like an onion – it comes in many layers. There’s a purpose to containerized environments deployed on cloud-hosted virtual machines. And we believe students should be able to leverage those things, easily and rapidly deploying cloud-hosted images, and will get to that here. But reproducibility doesn’t often involve reconstructing many GB virtual computing environments from scratch. Most of the time, we just want to copy-paste a few lines of code and expect it to work. Many layers lie between these two extremes – from package dependencies and system dependencies to containers, orchestration, metadata, even hardware requirements.\nIn many cases, it should be sufficient to copy-paste code from the examples shown here into your preferred computational environment – it’s okay to grab just what you need, you don’t have to take the whole onion. But it is also our goal to make it as easy as possible to grab the whole onion and take it where you want it – be that a local VSCode editor on your laptop, or an RStudio Server instance running up on Microsoft Azure cloud.\n\n\n\n\n\nOpen in GitHub Codespaces\n\n\nBy clicking the “open in codespaces” button on the README in GitHub, users will be placed into a free cloud-based virtual machine running a VSCode editor in their web browser.\nThis includes specific versions of R and python packages, the latest releases of the OSGeo C libraries GDAL, PROJ, and GEOS that power many spatial operations in both languages. These elements are pre-compiled in a Docker container based on the latest Ubuntu LTS release (22.04 at the time of writing), which itself is build according to the Dockerfile found in this repository using a GitHub Action. The devcontainer.json configuration will also set up relevant VSCode extensions for working with python and R, including interactivity for both Jupyter and Quarto notebooks. Additionally, it will provide access to an RStudio Server environment on an embedded port for users who prefer that editor to VSCode.\n\n\n\nOpen this repository in a local Visual Studio Code editor on a Mac, Linux, or Windows laptop and you will probably be prompted “Do you want to open this in project in a Dev Container?” If you agree, VSCode will attempt to use a local Docker installation to pull a container with much of the required software already installed. This uses the same Docker container and enables all the same extensions in VSCode, including RStudio server on the embedded port.\nOf course, users can open this project in a local VSCode or any other favorite editor without opening in the devcontainer. The user assumes responsibility to install necessary software, i.e. the packages listed in requirements.txt or install.R. Note that doing so does not ensure that the same version of system libraries like GDAL, PROJ, or GEOS will necessarily be used. For most operations this should not matter, but users on older versions of GDAL may encounter worse performance or other difficulties.\n\n\n\nWe can sidesteps elements specific to the VSCode editor defined in the devcontainer.json configuration while still leveraging the same system libraries and pre-built packages. For example, a user could also choose to run (or extend) the underlying docker container independently, e.g.\ndocker run --rm -ti ghcr.io/boettiger-lab/nasa-tops:latest bash\nwhich opens a bash terminal inside the container. This approach is also compatible with most HPC setups using singularity instead of docker.\nSome users may not be familiar with editing and running code entirely from a bash shell, so the container also includes RStudio server and thus can be run to launch RStudio in an open port instead,\ndocker run -d -p 8787:8787 --user root -e DISABLE_AUTH=true \\\n  ghcr.io/boettiger-lab/nasa-tops:latest\nand visit http://localhost:8787 to connect."
  },
  {
    "objectID": "contents/computing-environment.html#on-the-cloud-codespaces",
    "href": "contents/computing-environment.html#on-the-cloud-codespaces",
    "title": "Computing Environments",
    "section": "",
    "text": "Open in GitHub Codespaces\n\n\nBy clicking the “open in codespaces” button on the README in GitHub, users will be placed into a free cloud-based virtual machine running a VSCode editor in their web browser.\nThis includes specific versions of R and python packages, the latest releases of the OSGeo C libraries GDAL, PROJ, and GEOS that power many spatial operations in both languages. These elements are pre-compiled in a Docker container based on the latest Ubuntu LTS release (22.04 at the time of writing), which itself is build according to the Dockerfile found in this repository using a GitHub Action. The devcontainer.json configuration will also set up relevant VSCode extensions for working with python and R, including interactivity for both Jupyter and Quarto notebooks. Additionally, it will provide access to an RStudio Server environment on an embedded port for users who prefer that editor to VSCode."
  },
  {
    "objectID": "contents/computing-environment.html#locally-vscode",
    "href": "contents/computing-environment.html#locally-vscode",
    "title": "Computing Environments",
    "section": "",
    "text": "Open this repository in a local Visual Studio Code editor on a Mac, Linux, or Windows laptop and you will probably be prompted “Do you want to open this in project in a Dev Container?” If you agree, VSCode will attempt to use a local Docker installation to pull a container with much of the required software already installed. This uses the same Docker container and enables all the same extensions in VSCode, including RStudio server on the embedded port.\nOf course, users can open this project in a local VSCode or any other favorite editor without opening in the devcontainer. The user assumes responsibility to install necessary software, i.e. the packages listed in requirements.txt or install.R. Note that doing so does not ensure that the same version of system libraries like GDAL, PROJ, or GEOS will necessarily be used. For most operations this should not matter, but users on older versions of GDAL may encounter worse performance or other difficulties."
  },
  {
    "objectID": "contents/computing-environment.html#anywhere-docker",
    "href": "contents/computing-environment.html#anywhere-docker",
    "title": "Computing Environments",
    "section": "",
    "text": "We can sidesteps elements specific to the VSCode editor defined in the devcontainer.json configuration while still leveraging the same system libraries and pre-built packages. For example, a user could also choose to run (or extend) the underlying docker container independently, e.g.\ndocker run --rm -ti ghcr.io/boettiger-lab/nasa-tops:latest bash\nwhich opens a bash terminal inside the container. This approach is also compatible with most HPC setups using singularity instead of docker.\nSome users may not be familiar with editing and running code entirely from a bash shell, so the container also includes RStudio server and thus can be run to launch RStudio in an open port instead,\ndocker run -d -p 8787:8787 --user root -e DISABLE_AUTH=true \\\n  ghcr.io/boettiger-lab/nasa-tops:latest\nand visit http://localhost:8787 to connect."
  },
  {
    "objectID": "gdalcubes-stac-cog.html",
    "href": "gdalcubes-stac-cog.html",
    "title": "Mosaic images using STAC",
    "section": "",
    "text": "High-resolution satellites generate many snapshot images each with a limited field of view or spatial extent. In order to see a larger area in space, and/or observe changes across space and time, we need to assemble these many snapshots into a mosaic or “data cube” that we can analyze as a cohesive whole.\nEARTHDATA STAC CATALOGS\n\nlibrary(earthdatalogin)\nlibrary(rstac)\nlibrary(gdalcubes)\ngdalcubes_options(parallel = TRUE)\n\n\n\nFirst let’s get EDL authentication out of the way. For cloud data from almost any other STAC catalog (NOAA, USGS, Planetary Computer, etc), authentication is either unnecessary or already provided by the STAC API, but NASA EDL is special.\n\nlibrary(earthdatalogin)\n\nWe could just use edl_set_token() here as usual to set the environmental variable. This works fine but can problems if we do not remember to edl_unset_token() before accessing other non-EDL resources over the http interface. When using the gdalcubes package, we have support for a somewhat nicer, more localized authentication that uses the configuration options instead. We tell edl_set_token not to set the environmental variable globally, but to return in the header format which we can pass to gdalcubes_set_gdal_config():\n\nheader &lt;- edl_set_token(set_env_var = FALSE, format = \"header\")\ngdalcubes_set_gdal_config(\"GDAL_HTTP_HEADERS\", header)\n\nearthdatalogin also includes optional configuration settings for GDAL which can improve performance of cloud-based data access. Set the GDAL environmental variables using gdal_cloud_config()\n\ngdal_cloud_config()"
  },
  {
    "objectID": "gdalcubes-stac-cog.html#work-in-progress",
    "href": "gdalcubes-stac-cog.html#work-in-progress",
    "title": "Mosaic images using STAC",
    "section": "",
    "text": "High-resolution satellites generate many snapshot images each with a limited field of view or spatial extent. In order to see a larger area in space, and/or observe changes across space and time, we need to assemble these many snapshots into a mosaic or “data cube” that we can analyze as a cohesive whole.\nEARTHDATA STAC CATALOGS\n\nlibrary(earthdatalogin)\nlibrary(rstac)\nlibrary(gdalcubes)\ngdalcubes_options(parallel = TRUE)\n\n\n\nFirst let’s get EDL authentication out of the way. For cloud data from almost any other STAC catalog (NOAA, USGS, Planetary Computer, etc), authentication is either unnecessary or already provided by the STAC API, but NASA EDL is special.\n\nlibrary(earthdatalogin)\n\nWe could just use edl_set_token() here as usual to set the environmental variable. This works fine but can problems if we do not remember to edl_unset_token() before accessing other non-EDL resources over the http interface. When using the gdalcubes package, we have support for a somewhat nicer, more localized authentication that uses the configuration options instead. We tell edl_set_token not to set the environmental variable globally, but to return in the header format which we can pass to gdalcubes_set_gdal_config():\n\nheader &lt;- edl_set_token(set_env_var = FALSE, format = \"header\")\ngdalcubes_set_gdal_config(\"GDAL_HTTP_HEADERS\", header)\n\nearthdatalogin also includes optional configuration settings for GDAL which can improve performance of cloud-based data access. Set the GDAL environmental variables using gdal_cloud_config()\n\ngdal_cloud_config()"
  },
  {
    "objectID": "gdalcubes-stac-cog.html#search-via-stac",
    "href": "gdalcubes-stac-cog.html#search-via-stac",
    "title": "Mosaic images using STAC",
    "section": "Search via STAC",
    "text": "Search via STAC\nWe will now use the rstac package to search one or more NASA collections for data that falls into our desired bounding\nSet a search box in space & time\n\nbbox &lt;- c(xmin=-122.5, ymin=37.5, xmax=-122.0, ymax=38) \nstart &lt;- \"2022-01-01\"\nend &lt;- \"2022-06-30\"\n\n# Find all assets from the desired catalog:\nitems &lt;- stac(\"https://cmr.earthdata.nasa.gov/stac/LPCLOUD\") |&gt; \n  stac_search(collections = \"HLSL30.v2.0\",\n              bbox = bbox,\n              datetime = paste(start,end, sep = \"/\")) |&gt;\n  post_request() |&gt;\n  items_fetch() |&gt;\n  items_filter(filter_fn = \\(x) {x[[\"eo:cloud_cover\"]] &lt; 20})\n\nNote that many features have matched our search criteria! Each feature represents a ‘snapshot’ image taken by the satellite as it passes by (this is a harmonized product so actually there’s quite a lot of post-processing.) Each feature thus shares the same bounding box, projection, and timestamp, but may consist of many different ‘assets’, different COG files representing the different spectral bands on the satellite camera instrument. Each feature can potentially include quite extensive metadata about the feature, including details of instrument itself or from post-processing, such as cloud cover. Unfortunately, EarthData’s STAC metadata tends to be quite sparse."
  },
  {
    "objectID": "gdalcubes-stac-cog.html#building-a-data-cube",
    "href": "gdalcubes-stac-cog.html#building-a-data-cube",
    "title": "Mosaic images using STAC",
    "section": "Building a Data Cube",
    "text": "Building a Data Cube\n\n# Desired data cube shape & resolution\nv = cube_view(srs = \"EPSG:4326\",\n              extent = list(t0 = as.character(start), \n                            t1 = as.character(end),\n                            left = bbox[1], right = bbox[3],\n                            top = bbox[4], bottom = bbox[2]),\n              nx = 512, ny = 512, dt = \"P1M\")\n\n\n# RGB bands + cloud cover mask\ncol &lt;- stac_image_collection(items$features, \n                             asset_names = c(\"B02\", \"B03\", \"B04\", \"Fmask\"))\n\n\n# use a cloud mask -- not sure I have this correct\n# https://lpdaac.usgs.gov/documents/1326/HLS_User_Guide_V2.pdf\ncloud_mask &lt;- image_mask(\"Fmask\", values=1) # mask clouds and cloud shadows\nrgb_bands &lt;- c(\"B04\",\"B03\", \"B02\")\n\n# Here we go! note eval is lazy\nraster_cube(col, v, mask=cloud_mask) |&gt;\n  select_bands(rgb_bands) |&gt;\n  plot(rgb=1:3)"
  },
  {
    "objectID": "gdalcubes-stac-cog.html#scaling-up",
    "href": "gdalcubes-stac-cog.html#scaling-up",
    "title": "Mosaic images using STAC",
    "section": "Scaling up",
    "text": "Scaling up\nSame code with larger search box:\n\nbbox &lt;- c(xmin=-123, ymin=37, xmax=-121, ymax=39) \n\nstart &lt;- \"2023-01-01\"\nend &lt;-  \"2023-01-31\"\nitems &lt;- stac(\"https://cmr.earthdata.nasa.gov/stac/LPCLOUD\") |&gt; \n  stac_search(collections = \"HLSL30.v2.0\",\n              bbox = c(bbox),\n              datetime =paste(start,end, sep = \"/\")) |&gt;\n  post_request() |&gt;\n  items_fetch() |&gt;\n  items_filter(filter_fn = \\(x) {x[[\"eo:cloud_cover\"]] &lt; 20})\n\n\nview &lt;- cube_view(srs = \"EPSG:4326\",\n                        extent = list(t0 = as.character(start), \n                                      t1 = as.character(end),\n                                      left = bbox[1], right = bbox[3],\n                                      top = bbox[4], bottom = bbox[2]),\n                        nx = 1024, ny = 1024, dt = \"P1M\")\nassets &lt;- stac_image_collection(items$features, \n                             asset_names = c(\"B02\", \"B03\", \"B04\", \"Fmask\"))\n\n\nraster_cube(assets, view) |&gt;\n    select_bands(c(\"B04\",\"B03\", \"B02\")) |&gt;\n    plot(rgb=1:3)"
  },
  {
    "objectID": "stac-R.html",
    "href": "stac-R.html",
    "title": "",
    "section": "",
    "text": "library(rstac)\nlibrary(gdalcubes)\nlibrary(stars)\nlibrary(tmap)\ngdalcubes::gdalcubes_options(parallel = TRUE)\n\n\n\n## STAC Search over 400 million assets.\nbox &lt;- c(xmin=-122.51006, ymin=37.70801, xmax=-122.36268, ymax=37.80668) \nstart_date &lt;- \"2022-06-01\"\nend_date &lt;- \"2022-08-01\"\nitems &lt;- \n  stac(\"https://earth-search.aws.element84.com/v0/\") |&gt;\n  stac_search(collections = \"sentinel-s2-l2a-cogs\",\n              bbox = box,\n              datetime = paste(start_date, end_date, sep=\"/\"),\n              limit = 100) |&gt;\n  post_request() \n\n\n\n\n\ncol &lt;-\n  stac_image_collection(items$features,\n                        asset_names = c(\"B04\",\"B08\", \"SCL\"),\n                        property_filter = \\(x) {x[[\"eo:cloud_cover\"]] &lt; 20})\n\ncube &lt;- cube_view(srs = \"EPSG:4326\",  \n                  extent = list(t0 = start_date, t1 = end_date,\n                                left = box[1], right = box[3],\n                                top = box[4], bottom = box[2]),\n                  nx = 2400, ny = 2400, dt = \"P1D\",\n                  aggregation = \"median\", resampling = \"average\")\n\nS2.mask &lt;- image_mask(\"SCL\", values=c(3,8,9)) # mask clouds and cloud shadows\n\nWarning message in stac_image_collection(items$features, asset_names = c(\"B04\", :\n“STAC asset with name 'SCL' does not include eo:bands metadata and will be considered as a single band source”\n\n\n\n\nndvi &lt;- raster_cube(col, cube, mask = S2.mask) |&gt;\n  select_bands(c(\"B04\", \"B08\")) |&gt;\n  apply_pixel(\"(B08-B04)/(B08+B04)\", \"NDVI\") |&gt;\n  reduce_time(c(\"mean(NDVI)\")) |&gt;\n  st_as_stars()\n\n\n\ntm_shape(ndvi) + tm_raster(palette = viridisLite::mako(30), n = 30)\n\nstars object downsampled to 1000 by 1000 cells. See tm_shape manual (argument raster.downsample)"
  },
  {
    "objectID": "stac.html",
    "href": "stac.html",
    "title": "",
    "section": "",
    "text": "from pystac_client import Client\nimport stackstac\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\nbox = [-122.51006, 37.70801, -122.36268, 37.80668]\nclient = Client.open(\"https://earth-search.aws.element84.com/v1\")\nsearch = client.search(\n    collections = ['sentinel-2-l2a'],\n    bbox = box,\n    datetime = \"2022-06-01/2022-08-01\",\n    query={\"eo:cloud_cover\": {\"lt\": 20}}\n)\n\n\nitems = search.get_all_items()\nstack = stackstac.stack(items, bounds_latlon=box)\nstack\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'stackstac-32caef4f1496167f7ad4b58bb5aacca8' (time: 3,\n                                                                band: 32,\n                                                                y: 1103, x: 1306)&gt;\ndask.array&lt;fetch_raster_window, shape=(3, 32, 1103, 1306), dtype=float64, chunksize=(1, 1, 1024, 1024), chunktype=numpy.ndarray&gt;\nCoordinates: (12/53)\n  * time                                     (time) datetime64[ns] 2022-06-13...\n    id                                       (time) &lt;U24 'S2A_10SEG_20220613_...\n  * band                                     (band) &lt;U12 'aot' ... 'wvp-jp2'\n  * x                                        (x) float64 5.431e+05 ... 5.562e+05\n  * y                                        (y) float64 4.185e+06 ... 4.174e+06\n    s2:granule_id                            (time) &lt;U62 'S2A_OPER_MSI_L2A_TL...\n    ...                                       ...\n    raster:bands                             (band) object [{'nodata': 0, 'da...\n    gsd                                      (band) object None 10 ... None None\n    common_name                              (band) object None 'blue' ... None\n    center_wavelength                        (band) object None 0.49 ... None\n    full_width_half_max                      (band) object None 0.098 ... None\n    epsg                                     int64 32610\nAttributes:\n    spec:        RasterSpec(epsg=32610, bounds=(543120.0, 4173530.0, 556180.0...\n    crs:         epsg:32610\n    transform:   | 10.00, 0.00, 543120.00|\\n| 0.00,-10.00, 4184560.00|\\n| 0.0...\n    resolution:  10.0xarray.DataArray'stackstac-32caef4f1496167f7ad4b58bb5aacca8'time: 3band: 32y: 1103x: 1306dask.array&lt;chunksize=(1, 1, 1024, 1024), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.03 GiB\n8.00 MiB\n\n\nShape\n(3, 32, 1103, 1306)\n(1, 1, 1024, 1024)\n\n\nDask graph\n384 chunks in 3 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\nCoordinates: (53)time(time)datetime64[ns]2022-06-13T19:04:19.964000 ... 2...array(['2022-06-13T19:04:19.964000000', '2022-06-18T19:04:13.883000000',\n       '2022-06-28T19:04:14.765000000'], dtype='datetime64[ns]')id(time)&lt;U24'S2A_10SEG_20220613_0_L2A' ... '...array(['S2A_10SEG_20220613_0_L2A', 'S2B_10SEG_20220618_0_L2A',\n       'S2B_10SEG_20220628_0_L2A'], dtype='&lt;U24')band(band)&lt;U12'aot' 'blue' ... 'wvp-jp2'array(['aot', 'blue', 'coastal', 'green', 'nir', 'nir08', 'nir09', 'red',\n       'rededge1', 'rededge2', 'rededge3', 'scl', 'swir16', 'swir22', 'visual',\n       'wvp', 'aot-jp2', 'blue-jp2', 'coastal-jp2', 'green-jp2', 'nir-jp2',\n       'nir08-jp2', 'nir09-jp2', 'red-jp2', 'rededge1-jp2', 'rededge2-jp2',\n       'rededge3-jp2', 'scl-jp2', 'swir16-jp2', 'swir22-jp2', 'visual-jp2',\n       'wvp-jp2'], dtype='&lt;U12')x(x)float645.431e+05 5.431e+05 ... 5.562e+05array([543120., 543130., 543140., ..., 556150., 556160., 556170.])y(y)float644.185e+06 4.185e+06 ... 4.174e+06array([4184560., 4184550., 4184540., ..., 4173560., 4173550., 4173540.])s2:granule_id(time)&lt;U62'S2A_OPER_MSI_L2A_TL_ATOS_202206...array(['S2A_OPER_MSI_L2A_TL_ATOS_20220614T012412_A036432_T10SEG_N04.00',\n       'S2B_OPER_MSI_L2A_TL_2BPS_20220618T220401_A027595_T10SEG_N04.00',\n       'S2B_OPER_MSI_L2A_TL_2BPS_20220628T214846_A027738_T10SEG_N04.00'],\n      dtype='&lt;U62')earthsearch:payload_id(time)&lt;U74'roda-sentinel2/workflow-sentine...array(['roda-sentinel2/workflow-sentinel2-to-stac/9bd9dafd772e7cd7442bd4bd8a1fc06e',\n       'roda-sentinel2/workflow-sentinel2-to-stac/ae8eef222f9975a1f26256414f4830a9',\n       'roda-sentinel2/workflow-sentinel2-to-stac/eebfa962b95b62322a32abc349a80ce6'],\n      dtype='&lt;U74')s2:dark_features_percentage(time)float640.03163 0.1006 0.03313array([0.031632, 0.100637, 0.033125])s2:mgrs_tile(time)object'10SEG' None Nonearray(['10SEG', None, None], dtype=object)earthsearch:boa_offset_applied()boolTruearray(True)s2:processing_baseline()&lt;U5'04.00'array('04.00', dtype='&lt;U5')s2:cloud_shadow_percentage(time)object0 0.196433 0array([0, 0.196433, 0], dtype=object)s2:thin_cirrus_percentage(time)float640.3294 0.05492 0.000242array([3.29412e-01, 5.49200e-02, 2.42000e-04])s2:product_type()&lt;U7'S2MSI2A'array('S2MSI2A', dtype='&lt;U7')s2:sequence()&lt;U1'0'array('0', dtype='&lt;U1')s2:reflectance_conversion_factor(time)float640.9703 0.9692 0.9678array([0.97028256, 0.9692426 , 0.96783807])mgrs:latitude_band()&lt;U1'S'array('S', dtype='&lt;U1')view:sun_azimuth(time)float64130.8 129.9 129.1array([130.78174707, 129.85359453, 129.12105708])s2:high_proba_clouds_percentage(time)float640.006009 0.9349 1.922array([0.006009, 0.934937, 1.921995])s2:generation_time(time)&lt;U27'2022-06-14T01:24:12.000000Z' .....array(['2022-06-14T01:24:12.000000Z', '2022-06-18T22:04:01.000000Z',\n       '2022-06-28T21:48:46.000000Z'], dtype='&lt;U27')mgrs:utm_zone()int6410array(10)s2:datatake_type()&lt;U8'INS-NOBS'array('INS-NOBS', dtype='&lt;U8')s2:medium_proba_clouds_percentage(time)float640.05244 0.805 5.27array([0.052435, 0.804967, 5.270113])eo:cloud_cover(time)float640.3879 1.795 7.192array([0.387856, 1.794825, 7.19235 ])earthsearch:s3_path(time)&lt;U79's3://sentinel-cogs/sentinel-s2-...array(['s3://sentinel-cogs/sentinel-s2-l2a-cogs/10/S/EG/2022/6/S2A_10SEG_20220613_0_L2A',\n       's3://sentinel-cogs/sentinel-s2-l2a-cogs/10/S/EG/2022/6/S2B_10SEG_20220618_0_L2A',\n       's3://sentinel-cogs/sentinel-s2-l2a-cogs/10/S/EG/2022/6/S2B_10SEG_20220628_0_L2A'],\n      dtype='&lt;U79')s2:snow_ice_percentage(time)float640.003198 0.001367 0.000262array([0.003198, 0.001367, 0.000262])processing:software()object{'sentinel2-to-stac': '0.1.0'}array({'sentinel2-to-stac': '0.1.0'}, dtype=object)s2:unclassified_percentage(time)float640.2046 0.4531 0.329array([0.204591, 0.453081, 0.329007])s2:degraded_msi_data_percentage(time)object0 0.0107 0.0106array([0, 0.0107, 0.0106], dtype=object)s2:vegetation_percentage(time)float6423.51 21.8 22.63array([23.512551, 21.802154, 22.628824])s2:product_uri(time)&lt;U65'S2A_MSIL2A_20220613T184931_N040...array(['S2A_MSIL2A_20220613T184931_N0400_R113_T10SEG_20220614T012412.SAFE',\n       'S2B_MSIL2A_20220618T184919_N0400_R113_T10SEG_20220618T220401.SAFE',\n       'S2B_MSIL2A_20220628T184919_N0400_R113_T10SEG_20220628T214846.SAFE'],\n      dtype='&lt;U65')grid:code()&lt;U10'MGRS-10SEG'array('MGRS-10SEG', dtype='&lt;U10')updated(time)&lt;U24'2022-11-05T20:38:24.377Z' ... '...array(['2022-11-05T20:38:24.377Z', '2022-11-06T12:49:26.238Z',\n       '2022-11-06T13:12:01.647Z'], dtype='&lt;U24')view:sun_elevation(time)float6470.04 70.0 69.55array([70.04141818, 69.99591935, 69.54650655])constellation()&lt;U10'sentinel-2'array('sentinel-2', dtype='&lt;U10')created(time)&lt;U24'2022-11-05T20:38:24.377Z' ... '...array(['2022-11-05T20:38:24.377Z', '2022-11-06T12:49:26.238Z',\n       '2022-11-06T13:12:01.647Z'], dtype='&lt;U24')mgrs:grid_square()&lt;U2'EG'array('EG', dtype='&lt;U2')platform(time)&lt;U11'sentinel-2a' ... 'sentinel-2b'array(['sentinel-2a', 'sentinel-2b', 'sentinel-2b'], dtype='&lt;U11')instruments()&lt;U3'msi'array('msi', dtype='&lt;U3')s2:saturated_defective_pixel_percentage()int640array(0)s2:not_vegetated_percentage(time)float6423.64 23.44 24.6array([23.643011, 23.441641, 24.603175])proj:epsg()int6432610array(32610)s2:water_percentage(time)float6452.22 52.21 45.21array([52.217162, 52.20986 , 45.213255])s2:datatake_id(time)&lt;U34'GS2A_20220613T184931_036432_N04...array(['GS2A_20220613T184931_036432_N04.00',\n       'GS2B_20220618T184919_027595_N04.00',\n       'GS2B_20220628T184919_027738_N04.00'], dtype='&lt;U34')s2:nodata_pixel_percentage(time)float644.6e-05 3e-06 2e-05array([4.6e-05, 3.0e-06, 2.0e-05])s2:datastrip_id(time)&lt;U64'S2A_OPER_MSI_L2A_DS_ATOS_202206...array(['S2A_OPER_MSI_L2A_DS_ATOS_20220614T012412_S20220613T185948_N04.00',\n       'S2B_OPER_MSI_L2A_DS_2BPS_20220618T220401_S20220618T185515_N04.00',\n       'S2B_OPER_MSI_L2A_DS_2BPS_20220628T214846_S20220628T185740_N04.00'],\n      dtype='&lt;U64')title(band)&lt;U31'Aerosol optical thickness (AOT)...array(['Aerosol optical thickness (AOT)', 'Blue (band 2) - 10m',\n       'Coastal aerosol (band 1) - 60m', 'Green (band 3) - 10m',\n       'NIR 1 (band 8) - 10m', 'NIR 2 (band 8A) - 20m',\n       'NIR 3 (band 9) - 60m', 'Red (band 4) - 10m',\n       'Red edge 1 (band 5) - 20m', 'Red edge 2 (band 6) - 20m',\n       'Red edge 3 (band 7) - 20m', 'Scene classification map (SCL)',\n       'SWIR 1 (band 11) - 20m', 'SWIR 2 (band 12) - 20m',\n       'True color image', 'Water vapour (WVP)',\n       'Aerosol optical thickness (AOT)', 'Blue (band 2) - 10m',\n       'Coastal aerosol (band 1) - 60m', 'Green (band 3) - 10m',\n       'NIR 1 (band 8) - 10m', 'NIR 2 (band 8A) - 20m',\n       'NIR 3 (band 9) - 60m', 'Red (band 4) - 10m',\n       'Red edge 1 (band 5) - 20m', 'Red edge 2 (band 6) - 20m',\n       'Red edge 3 (band 7) - 20m', 'Scene classification map (SCL)',\n       'SWIR 1 (band 11) - 20m', 'SWIR 2 (band 12) - 20m',\n       'True color image', 'Water vapour (WVP)'], dtype='&lt;U31')raster:bands(band)object[{'nodata': 0, 'data_type': 'uin...array([list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 20, 'scale': 0.001, 'offset': 0}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 10, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 60, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 10, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 10, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 20, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 60, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 10, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 20, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 20, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 20, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint8', 'spatial_resolution': 20}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 20, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 20, 'scale': 0.0001, 'offset': -0.1}]),\n       None,\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 20, 'unit': 'cm', 'scale': 0.001, 'offset': 0}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 20, 'scale': 0.001, 'offset': 0}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 10, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 60, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 10, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 10, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 20, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 60, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 10, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 20, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 20, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 20, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint8', 'spatial_resolution': 20}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 20, 'scale': 0.0001, 'offset': -0.1}]),\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 20, 'scale': 0.0001, 'offset': -0.1}]),\n       None,\n       list([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 20, 'unit': 'cm', 'scale': 0.001, 'offset': 0}])],\n      dtype=object)gsd(band)objectNone 10 60 10 ... 20 20 None Nonearray([None, 10, 60, 10, 10, 20, 60, 10, 20, 20, 20, None, 20, 20, None,\n       None, None, 10, 60, 10, 10, 20, 60, 10, 20, 20, 20, None, 20, 20,\n       None, None], dtype=object)common_name(band)objectNone 'blue' 'coastal' ... None Nonearray([None, 'blue', 'coastal', 'green', 'nir', 'nir08', 'nir09', 'red',\n       'rededge', 'rededge', 'rededge', None, 'swir16', 'swir22', None,\n       None, None, 'blue', 'coastal', 'green', 'nir', 'nir08', 'nir09',\n       'red', 'rededge', 'rededge', 'rededge', None, 'swir16', 'swir22',\n       None, None], dtype=object)center_wavelength(band)objectNone 0.49 0.443 ... 2.19 None Nonearray([None, 0.49, 0.443, 0.56, 0.842, 0.865, 0.945, 0.665, 0.704, 0.74,\n       0.783, None, 1.61, 2.19, None, None, None, 0.49, 0.443, 0.56,\n       0.842, 0.865, 0.945, 0.665, 0.704, 0.74, 0.783, None, 1.61, 2.19,\n       None, None], dtype=object)full_width_half_max(band)objectNone 0.098 0.027 ... None Nonearray([None, 0.098, 0.027, 0.045, 0.145, 0.033, 0.026, 0.038, 0.019,\n       0.018, 0.028, None, 0.143, 0.242, None, None, None, 0.098, 0.027,\n       0.045, 0.145, 0.033, 0.026, 0.038, 0.019, 0.018, 0.028, None,\n       0.143, 0.242, None, None], dtype=object)epsg()int6432610array(32610)Indexes: (4)timePandasIndexPandasIndex(DatetimeIndex(['2022-06-13 19:04:19.964000', '2022-06-18 19:04:13.883000',\n               '2022-06-28 19:04:14.765000'],\n              dtype='datetime64[ns]', name='time', freq=None))bandPandasIndexPandasIndex(Index(['aot', 'blue', 'coastal', 'green', 'nir', 'nir08', 'nir09', 'red',\n       'rededge1', 'rededge2', 'rededge3', 'scl', 'swir16', 'swir22', 'visual',\n       'wvp', 'aot-jp2', 'blue-jp2', 'coastal-jp2', 'green-jp2', 'nir-jp2',\n       'nir08-jp2', 'nir09-jp2', 'red-jp2', 'rededge1-jp2', 'rededge2-jp2',\n       'rededge3-jp2', 'scl-jp2', 'swir16-jp2', 'swir22-jp2', 'visual-jp2',\n       'wvp-jp2'],\n      dtype='object', name='band'))xPandasIndexPandasIndex(Index([543120.0, 543130.0, 543140.0, 543150.0, 543160.0, 543170.0, 543180.0,\n       543190.0, 543200.0, 543210.0,\n       ...\n       556080.0, 556090.0, 556100.0, 556110.0, 556120.0, 556130.0, 556140.0,\n       556150.0, 556160.0, 556170.0],\n      dtype='float64', name='x', length=1306))yPandasIndexPandasIndex(Index([4184560.0, 4184550.0, 4184540.0, 4184530.0, 4184520.0, 4184510.0,\n       4184500.0, 4184490.0, 4184480.0, 4184470.0,\n       ...\n       4173630.0, 4173620.0, 4173610.0, 4173600.0, 4173590.0, 4173580.0,\n       4173570.0, 4173560.0, 4173550.0, 4173540.0],\n      dtype='float64', name='y', length=1103))Attributes: (4)spec :RasterSpec(epsg=32610, bounds=(543120.0, 4173530.0, 556180.0, 4184560.0), resolutions_xy=(10.0, 10.0))crs :epsg:32610transform :| 10.00, 0.00, 543120.00|\n| 0.00,-10.00, 4184560.00|\n| 0.00, 0.00, 1.00|resolution :10.0\n\n\n\nred = stack.sel(band=\"red\")\nnir = stack.sel(band=\"nir\")\n\n\nprint(\"computing ndvi...\")\nimport dask.diagnostics\nwith dask.diagnostics.ProgressBar():\n    ndvi = ( ((nir - red) / (red + nir)).\n            resample(time=\"MS\").\n            median(\"time\", keep_attrs=True).\n            compute()\n    )\n\ncomputing ndvi...\n[                                        ] | 0% Completed | 153.71 us[########################################] | 100% Completed | 8.31 ss\n\n\n\nndvi.plot.imshow(row=\"time\", cmap=\"winter\", robust=True, add_colorbar=False, size=8)\n\n&lt;xarray.plot.facetgrid.FacetGrid at 0x7f66b73e7b80&gt;\n\n\n\n\n\n\n\n# True-color image, over time\nrgb = stack.sel(band=[\"red\", \"green\", \"blue\"])\nrgb.plot.imshow(row=\"time\", robust=True, add_colorbar=False, size=8)\n\n\n&lt;xarray.plot.facetgrid.FacetGrid at 0x7f66b720c1c0&gt;\n\n\n\n\n\n\n# import rioxarray\n# ndvi.rio.to_raster(\"ndvi.tif\", driver=\"COG\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NASA TOPS-T Module",
    "section": "",
    "text": "Open in GitHub Codespaces"
  }
]