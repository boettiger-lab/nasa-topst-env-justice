---
title: "Computing Environments"
format: html
---


# Portable Reproducibility

Noam Ross says that good reproducibility is like an onion -- it comes
in many layers.  There's a purpose to containerized environments deployed on
cloud-hosted virtual machines.  And we believe students should be able to leverage
those things, easily and rapidly deploying cloud-hosted images, and will get
to that here. But reproducibility doesn't often involve reconstructing many GB
virtual computing environments from scratch.  Most of the time, we just want
to copy-paste a few lines of code and expect it to work. Many layers lie between
these two extremes -- from package dependencies and system dependencies to
containers, orchestration, metadata, even hardware requirements.  

In many cases, it should be sufficient to copy-paste code from the examples shown
here into your preferred computational environment -- it's okay to grab just what
you need, you don't have to take the whole onion. But it is also our goal to make
it as easy as possible to grab the whole onion and take it where you want it --
be that a local VSCode editor on your laptop, or an RStudio Server instance 
running up on Microsoft Azure cloud.  

## On the cloud: Codespaces

[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/espm-157/nasa-topst-env-justice?quickstart=1)


By clicking the "open in codespaces" button on the README in GitHub, users
will be placed into a free cloud-based virtual machine running a VSCode editor
in their web browser.  
This includes specific versions of R and python packages, the 
latest releases of the OSGeo C libraries GDAL, PROJ, and GEOS that power
many spatial operations in both languages.  These elements are pre-compiled
in a Docker container based on the latest Ubuntu LTS release (22.04 at
the time of writing), which itself is build according to the [Dockerfile](https://github.com/boettiger-lab/nasa-topst-env-justice/blob/main/.devcontainer/Dockerfile) 
found in this repository using [a GitHub Action](https://github.com/boettiger-lab/nasa-topst-env-justice/actions/workflows/docker-image.yml).
The [devcontainer.json configuration](https://github.com/boettiger-lab/nasa-topst-env-justice/blob/main/.devcontainer/devcontainer.json) will also set 
up relevant VSCode extensions for working with python and R, including 
interactivity for both Jupyter and Quarto notebooks.  Additionally, it will
provide access to an RStudio Server environment on an embedded port for users
who prefer that editor to VSCode.

## Locally: VSCode

Open this repository in a local [Visual Studio Code editor](https://code.visualstudio.com/) on a Mac, Linux, or Windows
laptop and you will probably be prompted "Do you want to open this in project 
in a Dev Container?" If you agree, VSCode will attempt to use a local Docker 
installation to pull a container with much of the required software already
installed. This uses the same Docker container and enables all the same 
extensions in VSCode, including RStudio server on the embedded port.

Of course, users can open this project in a local VSCode or any other favorite editor
without opening in the devcontainer. The user assumes responsibility to install necessary software,
i.e. the packages listed in `requirements.txt` or `install.R`.  Note that 
doing so does not ensure that the same version of system libraries like GDAL,
PROJ, or GEOS will necessarily be used. For most operations this should
not matter, but users on older versions of GDAL may encounter
worse performance or other difficulties.

## Anywhere: Docker

We can sidesteps elements specific to the VSCode editor defined in the
[`devcontainer.json` configuration](https://github.com/boettiger-lab/nasa-topst-env-justice/blob/main/.devcontainer/devcontainer.json)
while still leveraging the same system libraries and pre-built packages.
For example, a user could also choose to run (or extend) 
the underlying docker container independently, e.g.

```bash
docker run --rm -ti ghcr.io/boettiger-lab/nasa-tops:latest bash
```

which opens a bash terminal inside the container. This approach is also
compatible with most HPC setups using [singularity](https://rocker-project.org/use/singularity.html) instead of docker.

Some users may not be familiar with editing and running code entirely from a bash shell, so the container also includes RStudio server and thus can be run to launch RStudio in an open port instead,

```bash
docker run -d -p 8787:8787 --user root -e DISABLE_AUTH=true \
  ghcr.io/boettiger-lab/nasa-tops:latest
```

and visit `http://localhost:8787` to connect. 




