---
---

```{r include=FALSE}

#' ignore sigpipe
#' 
#' Avoid SIGPIPE error in scripts using Arrow S3
#' @export
ignore_sigpipe <- function() {
  requireNamespace("decor", quietly = TRUE)
  cpp11::cpp_source(code = '
  #include <csignal>
  #include <cpp11.hpp>
  [[cpp11::register]] void ignore_sigpipes() {
    signal(SIGPIPE, SIG_IGN);
  }
  ')
  ignore_sigpipes()
}
ignore_sigpipe()

```

```{r}
#remotes::install_github("boettiger-lab/earthdatalogin")
library(earthdatalogin)
```

```{r}
edl_netrc()
urls <- edl_search(short_name = "MUR-JPL-L4-GLOB-v4.1",
                   temporal = c("2020-01-01", "2021-12-31"))


vrt <- function(url) {
  prefix <-  "vrt://NETCDF:/vsicurl/"
  suffix <- ":analysed_sst?a_srs=OGC:CRS84&a_ullr=-180,90,180,-90"
  paste0(prefix, url, suffix)
}
```


```{r}
library(gdalcubes)
gdalcubes_options(parallel = parallel::detectCores()*2)
```

```{r}
url_dates <- as.Date(gsub(".*(\\d{8})\\d{6}.*", "\\1", urls), format="%Y%m%d")
data_gd <- gdalcubes::stack_cube(vrt(urls), datetime_values = url_dates)
```

```{r}
extent = list(left=-93, right=-76, bottom=41, top=49,
              t0="2020-01-01", t1="2021-12-31")

bench::bench_time({
  data_gd |> 
    gdalcubes::crop(extent) |> 
    aggregate_time(dt="P1M", method="sd") |> 
    plot(col = viridisLite::viridis(10))
})
```